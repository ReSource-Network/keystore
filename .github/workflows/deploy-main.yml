name: Deploy - Main

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [15.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Packages
        run: SKIP_POSTINSTALL=1 yarn
      - name: Build app
        run: CI=false yarn build
      - name: Build and publish docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DOCKER_IMAGE: shortlink
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 446481105531.dkr.ecr.us-east-2.amazonaws.com
          docker build -t $DOCKER_IMAGE:latest .
          docker tag $DOCKER_IMAGE:latest 446481105531.dkr.ecr.us-east-2.amazonaws.com/$DOCKER_IMAGE:latest
          docker push 446481105531.dkr.ecr.us-east-2.amazonaws.com/$DOCKER_IMAGE:latest
      - name: Setup SSH Key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.DEPLOY_SSH_KEY }}"
      - name: Deploy to server
        env:
          DOCKER_IMAGE: shortlink
          host: 18.117.86.251
          username: ec2-user
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh -o StrictHostKeyChecking=no $username@$host << EOF
            aws ecr get-login-password | sudo docker login --username AWS --password-stdin 446481105531.dkr.ecr.us-east-2.amazonaws.com
            sudo docker pull "446481105531.dkr.ecr.us-east-2.amazonaws.com/$DOCKER_IMAGE:latest"
            sudo docker ps -f name=shortlink -q | xargs --no-run-if-empty sudo docker rm -f
            sudo docker run --name $DOCKER_IMAGE --env-file=/home/ec2-user/.env --network="host" -p 80:80 -d --restart always "446481105531.dkr.ecr.us-east-2.amazonaws.com/$DOCKER_IMAGE:latest"
            sudo docker exec shortlink yarn db:migrate:prod
            sudo docker system prune -f
          EOF
